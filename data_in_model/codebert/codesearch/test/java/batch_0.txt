1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>Returns an Observable that signals the given ( constant reference ) item and then completes . <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / just . item . png alt = > <p > Note that the item is taken and re - emitted as is and not computed by any means by { @code just } . Use { @link #fromCallable ( Callable ) } to generate a single item on demand ( when { @code Observer } s subscribe to it ) . <p > See the multi - parameter overloads of { @code just } to emit more than one ( constant reference ) items one after the other . Use { @link #fromArray ( Object ... ) } to emit an arbitrary number of items that are known upfront . <p > To emit the items of an { @link Iterable } sequence ( such as a { @link java . util . List } ) use { @link #fromIterable ( Iterable ) } . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code just } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>Maps a sequence of values into ObservableSources and concatenates these ObservableSources eagerly into a single ObservableSource . <p > Eager concatenation means that once a subscriber subscribes this operator subscribes to all of the source ObservableSources . The operator buffers the values emitted by these ObservableSources and then drains them in order each one after the previous one completes . <p > <img width = 640 height = 390 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatMapEagerDelayError . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This method does not operate by default on a particular {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>Mirrors the one ObservableSource in an array of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code ambArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>If this { @code Observable } completes after emitting a single item return that item otherwise throw a { @code NoSuchElementException } . <p > <img width = 640 height = 315 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingSingle . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingSingle } does not operate by default on a particular { @link Scheduler } . < / dd > <dt > <b > Error handling : < / b > < / dt > <dd > If the source signals an error the operator wraps a checked { @link Exception } into { @link RuntimeException } and throws that . Otherwise { @code RuntimeException } s and { @link Error } s are rethrown as they are . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>Converts an Array into an ObservableSource that emits the items in the Array . <p > <img width = 640 height = 315 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / from . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromArray } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>Returns an Observable that emits non - overlapping buffered items from the source ObservableSource each time the specified boundary ObservableSource emits an item . <p > <img width = 640 height = 395 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / buffer8 . png alt = > <p > Completion of either the source or the boundary ObservableSource causes the returned ObservableSource to emit the latest buffer and complete . If either the source ObservableSource or the boundary ObservableSource issues an onError notification the event is passed on immediately without first emitting the buffer it is in the process of assembling . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > This version of { @code buffer } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>Returns an { @link Iterable } that always returns the item most recently emitted by this { @code Observable } . <p > <img width = 640 height = 426 src = https : // github . com / ReactiveX / RxJava / wiki / images / rx - operators / blockingMostRecent . o . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code blockingMostRecent } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L2385-L2391<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > just ( T item ) { ObjectHelper . requireNonNull ( item , "item is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableJust < T > ( item ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6653-L6661<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapEagerDelayError ( Function < ? super T , ? extends ObservableSource < ? extends R > > mapper , int maxConcurrency , int prefetch , boolean tillTheEnd ) { ObjectHelper . requireNonNull ( mapper , "mapper is null" ) ; ObjectHelper . verifyPositive ( maxConcurrency , "maxConcurrency" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMapEager < T , R > ( this , mapper , tillTheEnd ? ErrorMode . END : ErrorMode . BOUNDARY , maxConcurrency , prefetch ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L144-L158<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > ambArray ( ObservableSource < ? extends T > ... sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; int len = sources . length ; if ( len == 0 ) { return empty ( ) ; } if ( len == 1 ) { return ( Observable < T > ) wrap ( sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( sources , null ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5378-L5386<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final T blockingSingle ( ) { T v = singleElement ( ) . blockingGet ( ) ; if ( v == null ) { throw new NoSuchElementException ( ) ; } return v ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6117-L6123<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B , U extends Collection < ? super T > > Observable < U > buffer ( ObservableSource < B > boundary , Callable < U > bufferSupplier ) { ObjectHelper . requireNonNull ( boundary , "boundary is null" ) ; ObjectHelper . requireNonNull ( bufferSupplier , "bufferSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableBufferExactBoundary < T , U , B > ( this , boundary , bufferSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6878-L6882<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybe ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybe ( mapper , 2 ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1761-L1773<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) @ NonNull public static < T > Observable < T > fromArray ( T ... items ) { ObjectHelper . requireNonNull ( items , "items is null" ) ; if ( items . length == 0 ) { return empty ( ) ; } else if ( items . length == 1 ) { return just ( items [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromArray < T > ( items ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6050-L6054<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < B > Observable < List < T > > buffer ( ObservableSource < B > boundary ) { return buffer ( boundary , ArrayListSupplier . < T > asCallable ( ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5335-L5339<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Iterable < T > blockingMostRecent ( T initialValue ) { return new BlockingObservableMostRecent < T > ( this , initialValue ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L6936-L6940<CODESPLIT>Maps the upstream items into {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Observable < R > concatMapMaybeDelayError ( Function < ? super T , ? extends MaybeSource < ? extends R > > mapper ) { return concatMapMaybeDelayError ( mapper , true , 2 ) ; }