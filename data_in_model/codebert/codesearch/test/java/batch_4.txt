1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Mirrors the one ObservableSource in an Iterable of several ObservableSources that first either emits an item or sends a termination notification . <p > <img width = 640 height = 385 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / amb . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code amb } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Subscribes to the source and calls the {<CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of just before termination if you have set { @code disposeEagerly } to { @code true } and a dispose () call does not occur before termination . Otherwise resource disposal will occur on a dispose () call . Eager disposal is particularly appropriate for a synchronous ObservableSource that reuses resources . { @code disposeAction } will only be called once per subscription . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Constructs an ObservableSource that creates a dependent resource object which is disposed of when the downstream calls dispose () . <p > <img width = 640 height = 400 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / using . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code using } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Returns an Observable that emits the items emitted by each of the ObservableSources emitted by the source ObservableSource one after the other without interleaving them . <p > <img width = 640 height = 380 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concat . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code concat } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Returns an Observable that invokes an { @link Observer } s { @link Observer#onError onError } method when the Observer subscribes to it . <p > <img width = 640 height = 220 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / error . supplier . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code error } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Converts an { @link Iterable } sequence into an ObservableSource that emits the items in the sequence . <p > <img width = 640 height = 186 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / fromIterable . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code fromIterable } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Create an Observable by wrapping an ObservableSource <em > which has to be implemented according to the Reactive - Streams - based Observable specification by handling disposal correctly ; no safeguards are provided by the Observable itself< / em > . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Converts an ObservableSource that emits ObservableSources into an ObservableSource that emits the items emitted by the most recently emitted of those ObservableSources . <p > <img width = 640 height = 370 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / switchDo . png alt = > <p > { @code switchOnNext } subscribes to an ObservableSource that emits ObservableSources . Each time it observes one of these emitted ObservableSources the ObservableSource returned by { @code switchOnNext } begins emitting the items emitted by that ObservableSource . When a new ObservableSource is emitted { @code switchOnNext } stops emitting items from the earlier - emitted ObservableSource and begins emitting items from the new one . <p > The resulting ObservableSource completes if both the outer ObservableSource and the last inner ObservableSource if any complete . If the outer ObservableSource signals an onError the inner ObservableSource is disposed and the error delivered in - sequence . <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > { @code switchOnNext } does not operate by default on a particular { @link Scheduler } . < / dd > < / dl ><CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L118-L124<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > amb ( Iterable < ? extends ObservableSource < ? extends T > > sources ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableAmb < T > ( null , sources ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L5550-L5553<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ SchedulerSupport ( SchedulerSupport . NONE ) public final void blockingSubscribe ( Observer < ? super T > observer ) { ObservableBlockingSubscribe . subscribe ( this , observer ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4060-L4067<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer , boolean eager ) { ObjectHelper . requireNonNull ( resourceSupplier , "resourceSupplier is null" ) ; ObjectHelper . requireNonNull ( sourceSupplier , "sourceSupplier is null" ) ; ObjectHelper . requireNonNull ( disposer , "disposer is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableUsing < T , D > ( resourceSupplier , sourceSupplier , disposer , eager ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L4026-L4030<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T , D > Observable < T > using ( Callable < ? extends D > resourceSupplier , Function < ? super D , ? extends ObservableSource < ? extends T > > sourceSupplier , Consumer < ? super D > disposer ) { return using ( resourceSupplier , sourceSupplier , disposer , true ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1150-L1158<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concat ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int prefetch ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( prefetch , "prefetch" ) ; return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( sources , Functions . identity ( ) , prefetch , ErrorMode . IMMEDIATE ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1711-L1717<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > error ( Callable < ? extends Throwable > errorSupplier ) { ObjectHelper . requireNonNull ( errorSupplier , "errorSupplier is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableError < T > ( errorSupplier ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1979-L1985<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > fromIterable ( Iterable < ? extends T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; return RxJavaPlugins . onAssembly ( new ObservableFromIterable < T > ( source ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3995-L4003<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > unsafeCreate ( ObservableSource < T > onSubscribe ) { ObjectHelper . requireNonNull ( onSubscribe , "onSubscribe is null" ) ; if ( onSubscribe instanceof Observable ) { throw new IllegalArgumentException ( "unsafeCreate(Observable) should be upgraded" ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( onSubscribe ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L3818-L3825<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ SuppressWarnings ( { "rawtypes" , "unchecked" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > switchOnNext ( ObservableSource < ? extends ObservableSource < ? extends T > > sources , int bufferSize ) { ObjectHelper . requireNonNull ( sources , "sources is null" ) ; ObjectHelper . verifyPositive ( bufferSize , "bufferSize" ) ; return RxJavaPlugins . onAssembly ( new ObservableSwitchMap ( sources , Functions . identity ( ) , bufferSize , false ) ) ; }
1<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>https://github.com/ReactiveX/RxJava/blob/ac84182aa2bd866b53e01c8e3fe99683b882c60e/src/main/java/io/reactivex/Observable.java#L1275-L1286<CODESPLIT>Concatenates a variable number of ObservableSource sources . <p > Note : named this way because of overload conflict with concat ( ObservableSource&lt ; ObservableSource&gt ; ) <p > <img width = 640 height = 290 src = https : // raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / concatArray . png alt = > <dl > <dt > <b > Scheduler : < / b > < / dt > <dd > {<CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > concatArray ( ObservableSource < ? extends T > ... sources ) { if ( sources . length == 0 ) { return empty ( ) ; } else if ( sources . length == 1 ) { return wrap ( ( ObservableSource < T > ) sources [ 0 ] ) ; } return RxJavaPlugins . onAssembly ( new ObservableConcatMap ( fromArray ( sources ) , Functions . identity ( ) , bufferSize ( ) , ErrorMode . BOUNDARY ) ) ; }